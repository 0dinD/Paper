From 87622de2cffd52a880392eb3c7c861c7d07f1023 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 30 Nov 2016 20:56:58 -0600
Subject: [PATCH] Speedup BlockPos by fixing inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my mircorbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index f772c7c..bfb47e4 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -7,22 +7,23 @@ import javax.annotation.concurrent.Immutable;
 public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
 
     public static final BaseBlockPosition ZERO = new BaseBlockPosition(0, 0, 0);
-    private final int a;
-    private final int b;
-    private final int c;
-    // Paper start
-    public boolean isValidLocation() {
-        return a >= -30000000 && c >= -30000000 && a < 30000000 && c < 30000000 && b >= 0 && b < 256;
+    // Paper start - Make mutable and protected for MutableBlockPos and PooledBlockPos
+    protected int x;
+    protected int y;
+    protected int z;
+
+    public final boolean isValidLocation() {
+        return x >= -30000000 && z >= -30000000 && x < 30000000 && z < 30000000 && y >= 0 && y < 256;
     }
     public boolean isInvalidYLocation() {
-        return b < 0 || b >= 256;
+        return y < 0 || y >= 256;
     }
     // Paper end
 
     public BaseBlockPosition(int i, int j, int k) {
-        this.a = i;
-        this.b = j;
-        this.c = k;
+        this.x = i;
+        this.y = j;
+        this.z = k;
     }
 
     public BaseBlockPosition(double d0, double d1, double d2) {
@@ -49,17 +50,19 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
         return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
     }
 
-    public int getX() {
-        return this.a;
+    // Paper start - Only allow a single implementation
+    public final int getX() {
+        return this.x;
     }
 
-    public int getY() {
-        return this.b;
+    public final int getY() {
+        return this.y;
     }
 
-    public int getZ() {
-        return this.c;
+    public final int getZ() {
+        return this.z;
     }
+    // Paper end
 
     public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
         return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 6c14061..9757f09 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -254,9 +254,9 @@ public class BlockPosition extends BaseBlockPosition {
                             }
                             // Paper end
 
-                            this.b.b = i;
-                            this.b.c = j;
-                            this.b.d = k;
+                            ((BaseBlockPosition) this.b).x = i;
+                            ((BaseBlockPosition) this.b).y = j;
+                            ((BaseBlockPosition) this.b).z = k;
                             return this.b;
                         }
                     }
@@ -370,6 +370,8 @@ public class BlockPosition extends BaseBlockPosition {
 
     public static class MutableBlockPosition extends BlockPosition {
 
+        // Paper start - Remove variables
+        /*
         protected int b;
         protected int c;
         protected int d;
@@ -382,6 +384,7 @@ public class BlockPosition extends BaseBlockPosition {
         public boolean isInvalidYLocation() {
             return c < 0 || c >= 256;
         }
+        */
         // Paper end
 
         public MutableBlockPosition() {
@@ -394,9 +397,11 @@ public class BlockPosition extends BaseBlockPosition {
 
         public MutableBlockPosition(int i, int j, int k) {
             super(0, 0, 0);
-            this.b = i;
-            this.c = j;
-            this.d = k;
+            // Paper start - Modify base position variables
+            ((BaseBlockPosition) this).x = i;
+            ((BaseBlockPosition) this).y = j;
+            ((BaseBlockPosition) this).z = k;
+            // Paper end
         }
 
         public BlockPosition a(double d0, double d1, double d2) {
@@ -415,6 +420,8 @@ public class BlockPosition extends BaseBlockPosition {
             return super.a(enumblockrotation).h();
         }
 
+        // Paper start - Use superclass methods
+        /*
         public int getX() {
             return this.b;
         }
@@ -426,12 +433,16 @@ public class BlockPosition extends BaseBlockPosition {
         public int getZ() {
             return this.d;
         }
+        */
+        // Paper end
 
         public void setValues(int x, int y, int z) { c(x, y, z); } // Paper - OBFHELPER
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
-            this.b = i;
-            this.c = j;
-            this.d = k;
+            // Paper start - Modify base position variables
+            ((BaseBlockPosition) this).x = i;
+            ((BaseBlockPosition) this).y = j;
+            ((BaseBlockPosition) this).z = k;
+            // Paper end
             return this;
         }
 
@@ -448,11 +459,11 @@ public class BlockPosition extends BaseBlockPosition {
         }
 
         public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
-            return this.c(this.b + enumdirection.getAdjacentX() * i, this.c + enumdirection.getAdjacentY() * i, this.d + enumdirection.getAdjacentZ() * i);
+            return this.c(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i); // Paper - USE THE BLEEPING GETTERS
         }
 
         public void p(int i) {
-            this.c = i;
+            ((BaseBlockPosition) this).y = i; // Paper - Modify base variable
         }
 
         public BlockPosition h() {
-- 
2.9.3

