From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 26 Aug 2018 20:49:50 -0400
Subject: [PATCH] Optimize RegistryMaterials

Use larger initial sizes to increase bucket capacity on the BiMap

BiMap.get was seen to be using a good bit of CPU time.

diff --git a/src/main/java/net/minecraft/server/RegistryMaterials.java b/src/main/java/net/minecraft/server/RegistryMaterials.java
index c60140a283df47edf23fe4f54a2c1d2fca7593f8..7189204ee57343b3381e8c83eb5a5281a0e0962f 100644
--- a/src/main/java/net/minecraft/server/RegistryMaterials.java
+++ b/src/main/java/net/minecraft/server/RegistryMaterials.java
@@ -25,9 +25,9 @@ import org.apache.logging.log4j.Logger;
 public class RegistryMaterials<T> extends IRegistryWritable<T> {
 
     protected static final Logger LOGGER = LogManager.getLogger();
-    protected final RegistryID<T> b = new RegistryID<>(256);
-    protected final BiMap<MinecraftKey, T> c = HashBiMap.create();
-    private final BiMap<ResourceKey<T>, T> bb = HashBiMap.create();
+    protected final RegistryID<T> b = new RegistryID<>(2048); // Paper - use bigger expected size to reduce collisions
+    protected final BiMap<MinecraftKey, T> c = HashBiMap.create(2048); // Paper - use bigger expected size to reduce collisions
+    private final BiMap<ResourceKey<T>, T> bb = HashBiMap.create(2048); // Paper - use bigger expected size to reduce collisions
     private final Set<ResourceKey<T>> bc = Sets.newIdentityHashSet();
     protected Object[] d;
     private int bd;
@@ -124,7 +124,7 @@ public class RegistryMaterials<T> extends IRegistryWritable<T> {
             this.d = collection.toArray(new Object[collection.size()]);
         }
 
-        return SystemUtils.a(this.d, random);
+        return (T) SystemUtils.a(this.d, random);  // Paper - Decompile fix
     }
 
     @Override
@@ -164,7 +164,7 @@ public class RegistryMaterials<T> extends IRegistryWritable<T> {
             Iterator iterator = registrymaterials.b.iterator();
 
             while (iterator.hasNext()) {
-                T t0 = iterator.next();
+                T t0 = (T) iterator.next(); // Paper - Decompile fix
 
                 builder.add(Pair.of(registrymaterials.c(t0).get(), t0));
             }
