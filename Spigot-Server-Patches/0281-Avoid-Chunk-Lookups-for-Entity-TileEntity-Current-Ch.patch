From 194a295182c17f0e74b68286d465126fc28cc2d1 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 4 Jul 2018 03:39:51 -0400
Subject: [PATCH] Avoid Chunk Lookups for Entity/TileEntity Current Chunk

In many places where we simply want the current chunk the entity
is in, instead of doing a hashmap lookup for it, we now have access
to the object directly on the Entity/TileEntity object we can directly grab.

Use that local value instead to reduce lookups in many hot places.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 3ca579e38..1c1f39524 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -723,6 +723,7 @@ public class Chunk implements IChunkAccess {
         ((HeightMap) this.heightMap.get(heightmap_type)).a(along);
     }
 
+    public void removeEntity(Entity entity) { b(entity); } // Paper - OBFHELPER
     public void b(Entity entity) {
         this.a(entity, entity.chunkY);
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index f637aed77..84efc1cc3 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1187,12 +1187,15 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
         int j;
         // Paper start - Set based removal lists
         for (Entity e : this.g) {
+            /*
             j = e.getChunkZ();
             int k = e.getChunkX();
 
             if (e.inChunk && this.isChunkLoaded(k, j, true)) {
                 this.getChunkAt(k, j).b(e);
-            }
+            }*/
+            Chunk chunk = e.inChunk ? e.getCurrentChunk() : null;
+            if (chunk != null) chunk.removeEntity(e);
         }
 
         for (Entity e : this.g) {
@@ -1253,12 +1256,17 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
             this.methodProfiler.exit();
             this.methodProfiler.enter("remove");
             if (entity.dead) {
+                // Paper start
+                /*
                 j = entity.chunkX;
                 int l = entity.chunkZ;
 
                 if (entity.inChunk && this.isChunkLoaded(j, l, true)) {
                     this.getChunkAt(j, l).b(entity);
-                }
+                }*/
+                Chunk chunk = entity.inChunk ? entity.getCurrentChunk() : null;
+                if (chunk != null) chunk.removeEntity(entity);
+                // Paper end
 
                 guardEntityList = false; // Spigot
                 this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
@@ -1303,7 +1311,7 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
                 BlockPosition blockposition = tileentity.getPosition();
 
                 // Paper start - Skip ticking in chunks scheduled for unload
-                net.minecraft.server.Chunk chunk = this.getChunkIfLoaded(blockposition);
+                net.minecraft.server.Chunk chunk = tileentity.getCurrentChunk();
                 boolean shouldTick = chunk != null;
                 if(this.paperConfig.skipEntityTickingInChunksScheduledForUnload)
                     shouldTick = shouldTick && chunk.scheduledForUnload == null;
@@ -1339,8 +1347,11 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
                 tilesThisCycle--;
                 this.tileEntityListTick.remove(tileTickPosition--);
                 //this.tileEntityList.remove(tileentity); // Paper - remove unused list
-                if (this.isLoaded(tileentity.getPosition())) {
-                    this.getChunkAtWorldCoords(tileentity.getPosition()).d(tileentity.getPosition());
+                // Paper start
+                net.minecraft.server.Chunk chunk = tileentity.getCurrentChunk();
+                if (chunk != null) {
+                    chunk.removeTileEntity(tileentity.getPosition());
+                    // Paper end
                 }
             }
         }
-- 
2.20.1

