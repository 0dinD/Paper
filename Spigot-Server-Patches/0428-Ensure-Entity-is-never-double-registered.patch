From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 29 Mar 2020 18:26:14 -0400
Subject: [PATCH] Ensure Entity is never double registered

If something calls register twice, and the world is ticking, it could be
enqueued to add twice.

Vs behavior of non ticking of just overwriting state.

We will now simply log a warning when this happens instead of crashing the server.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 278b379ba761b76fd94d3cb7aef9d3240271a973..59d72dfc903bb7a9c50baf59fface280b44a6d5b 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -60,6 +60,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     // Paper start
+    boolean isQueuedForRegister = false;
     public static Random SHARED_RANDOM = new Random() {
         private boolean locked = false;
         @Override
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index b8e635e351773663f62bd07193c6b0aceef0a3f3..17f9e9119723561a4b01efbb91d651fbc9c8726e 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -532,6 +532,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             Entity entity2;
 
             while ((entity2 = (Entity) this.entitiesToAdd.poll()) != null) {
+                if (!entity2.isQueuedForRegister) continue; // Paper - ignore cancelled registers
                 this.registerEntity(entity2);
             }
 
@@ -1228,6 +1229,19 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
     public void unregisterEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
+        // Paper start - fix entity registration issues
+        if (entity instanceof EntityComplexPart) {
+            // Usually this is a no-op for complex parts, and ID's should be removed, but go ahead and remove it anyways
+            // Dragon parts are handled special in register. they don't receive a valid = true or register by UUID etc.
+            this.entitiesById.remove(entity.getId(), entity);
+            return;
+        }
+        if (!entity.valid) {
+            // Someone called remove before we ever got added, cancel the add.
+            entity.isQueuedForRegister = false;
+            return;
+        }
+        // Paper end
         // Spigot start
         if ( entity instanceof EntityHuman )
         {
@@ -1294,9 +1308,21 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
     private void registerEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
+        // Paper start - don't double enqueue entity registration
+        //noinspection ObjectEquality
+        if (this.entitiesById.get(entity.getId()) == entity) {
+            LOGGER.error(entity + " was already registered!");
+            new Throwable().printStackTrace();
+            return;
+        }
+        // Paper end
         if (this.tickingEntities) {
-            this.entitiesToAdd.add(entity);
+            if (!entity.isQueuedForRegister) { // Paper
+                this.entitiesToAdd.add(entity);
+                entity.isQueuedForRegister = true; // Paper
+            }
         } else {
+            entity.isQueuedForRegister = false; // Paper
             this.entitiesById.put(entity.getId(), entity);
             if (entity instanceof EntityEnderDragon) {
                 EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).eK();
