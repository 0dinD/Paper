From 5abf081ee514bf133173e6b77aede9134606ec6f Mon Sep 17 00:00:00 2001
From: CullanP <cullanpage@gmail.com>
Date: Thu, 3 Mar 2016 02:13:38 -0600
Subject: [PATCH] Avoid hopper searches if there are no items

Hoppers searching for items and minecarts is the most expensive part of hopper ticking.
We keep track of the number of minecarts and items in a chunk.
If there are no items in the chunk, we skip searching for items.
If there are no minecarts in the chunk, we skip searching for them.

Usually hoppers aren't near items, so we can skip most item searches.
And since minecart hoppers are used _very_ rarely near we can avoid alot of searching there.

Combined, this adds up a lot.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 87ec4d1a2..c5d562dca 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -96,6 +96,10 @@ public class Chunk implements IChunkAccess {
         }
     }
     final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this);
+    // Track the number of minecarts and items
+    // Keep this synced with entitySlices.add() and entitySlices.remove()
+    private final int[] itemCounts = new int[16];
+    private final int[] inventoryEntityCounts = new int[16];
     // Paper end
     public boolean areNeighborsLoaded(final int radius) {
         switch (radius) {
@@ -690,6 +694,11 @@ public class Chunk implements IChunkAccess {
         entity.chunkZ = this.locZ;
         this.entitySlices[k].add(entity);
         // Paper start
+        if (entity instanceof EntityItem) {
+            itemCounts[k]++;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[k]++;
+        }
         entity.setCurrentChunk(this);
         entityCounts.increment(entity.getMinecraftKeyString());
         // Paper end
@@ -715,6 +724,11 @@ public class Chunk implements IChunkAccess {
         if (!this.entitySlices[i].remove(entity)) {
             return;
         }
+        if (entity instanceof EntityItem) {
+            itemCounts[i]--;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[i]--;
+        }
         entity.setCurrentChunk(null);
         entityCounts.decrement(entity.getMinecraftKeyString());
         // Paper end
@@ -962,6 +976,15 @@ public class Chunk implements IChunkAccess {
             if (!this.entitySlices[k].isEmpty()) {
                 Iterator iterator = this.entitySlices[k].iterator();
 
+                // Paper start - Don't search for inventories if we have none, and that is all we want
+                /*
+                * We check if they want inventories by seeing if it is the static `IEntitySelector.c`
+                *
+                * Make sure the inventory selector stays in sync.
+                * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+                */
+                if (predicate == IEntitySelector.isInventory() && inventoryEntityCounts[k] <= 0) continue;
+                // Paper end
                 while (iterator.hasNext()) {
                     Entity entity1 = (Entity) iterator.next();
 
@@ -998,7 +1021,18 @@ public class Chunk implements IChunkAccess {
         i = MathHelper.clamp(i, 0, this.entitySlices.length - 1);
         j = MathHelper.clamp(j, 0, this.entitySlices.length - 1);
 
+        // Paper start
+        int[] counts;
+        if (EntityItem.class.isAssignableFrom(oclass)) {
+            counts = itemCounts;
+        } else if (IInventory.class.isAssignableFrom(oclass)) {
+            counts = inventoryEntityCounts;
+        } else {
+            counts = null;
+        }
+        // Paper end
         for (int k = i; k <= j; ++k) {
+            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             Iterator iterator = this.entitySlices[k].iterator(); // Spigot
 
             while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index 7b7fd6b9b..eb08a1caa 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -10,6 +10,7 @@ public final class IEntitySelector {
     public static final Predicate<Entity> c = (entity) -> {
         return entity.isAlive() && !entity.isVehicle() && !entity.isPassenger();
     };
+    public static final Predicate<Entity> isInventory() { return d; } // Paper - OBFHELPER
     public static final Predicate<Entity> d = (entity) -> {
         return entity instanceof IInventory && entity.isAlive();
     };
-- 
2.20.0

