From efab2286b27530bc51746d79927a19d4b75d0777 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 9 Sep 2018 00:32:05 -0400
Subject: [PATCH] Remove deadlock risk in firing async events

The PluginManager incorrectly used synchronization on firing any event
that was marked as synchronous.

This synchronized did not even protect any concurrency risk as
handlers were already thread safe in terms of mutations during event
dispatch.

The way it was used, has commonly led to deadlocks on the server,
which results in a hard crash.

This change removes the synchronize and adds some protection around enable/disable

diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 9391bbf0..5098eade 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -27,7 +27,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface Entity extends Metadatable, CommandSender, Nameable {
 
-    /**
+    /*
      * Gets the entity's current position
      *
      * @return a new copy of Location containing the position of this entity
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 269bb5ca..5d99a41a 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -391,7 +391,7 @@ public final class SimplePluginManager implements PluginManager {
      * @param plugin Plugin to check
      * @return true if the plugin is enabled, otherwise false
      */
-    public boolean isPluginEnabled(@Nullable Plugin plugin) {
+    public synchronized boolean isPluginEnabled(@Nullable Plugin plugin) { // Paper - synchronize
         if ((plugin != null) && (plugins.contains(plugin))) {
             return plugin.isEnabled();
         } else {
@@ -399,7 +399,7 @@ public final class SimplePluginManager implements PluginManager {
         }
     }
 
-    public void enablePlugin(@NotNull final Plugin plugin) {
+    public synchronized void enablePlugin(@NotNull final Plugin plugin) { // Paper - synchronize
         if (!plugin.isEnabled()) {
             List<Command> pluginCommands = PluginCommandYamlParser.parse(plugin);
 
@@ -436,7 +436,7 @@ public final class SimplePluginManager implements PluginManager {
         disablePlugin(plugin, false);
     }
 
-    public void disablePlugin(@NotNull final Plugin plugin, boolean closeClassloader) {
+    public synchronized void disablePlugin(@NotNull final Plugin plugin, boolean closeClassloader) { // Paper - synchronize
         // Paper end - close Classloader on disable
         if (plugin.isEnabled()) {
             try {
@@ -496,6 +496,7 @@ public final class SimplePluginManager implements PluginManager {
             defaultPerms.get(false).clear();
         }
     }
+    private void fireEvent(Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
 
     /**
      * Calls an event with the given details.
@@ -505,25 +506,11 @@ public final class SimplePluginManager implements PluginManager {
      * @param event Event details
      */
     public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous()) {
-            if (Thread.holdsLock(this)) {
-                throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");
-            }
-            if (server.isPrimaryThread()) {
-                throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
-            }
-            fireEvent(event);
-        } else {
-            if (!server.isPrimaryThread()) {
-                throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from another thread.");
-            }
-            synchronized (this) {
-                fireEvent(event);
-            }
+        // Paper - replace callEvent by merging to below method
+        if (event.isAsynchronous() && server.isPrimaryThread()) {
+            throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
         }
-    }
 
-    private void fireEvent(@NotNull Event event) {
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
 
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index 5e986de8..2b50fe63 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -17,7 +17,7 @@ public class PluginManagerTest {
     private static final PluginManager pm = TestServer.getInstance().getPluginManager();
 
     private final MutableObject store = new MutableObject();
-
+/* // Paper start - remove unneeded test
     @Test
     public void testAsyncSameThread() {
         final Event event = new TestEvent(true);
@@ -28,14 +28,14 @@ public class PluginManagerTest {
             return;
         }
         throw new IllegalStateException("No exception thrown");
-    }
+    }*/ // Paper end
 
     @Test
     public void testSyncSameThread() {
         final Event event = new TestEvent(false);
         pm.callEvent(event);
     }
-
+/* // Paper start - remove unneeded test
     @Test
     public void testAsyncLocked() throws InterruptedException {
         final Event event = new TestEvent(true);
@@ -123,7 +123,7 @@ public class PluginManagerTest {
         if (store.value == null) {
             throw new IllegalStateException("No exception thrown");
         }
-    }
+    } */ // Paper
 
     @Test
     public void testRemovePermissionByNameLower() {
-- 
2.21.0

