From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Sat, 21 Aug 2021 17:25:38 -0700
Subject: [PATCH] API for updating recipes on clients


diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 620c136d970c836c036ea5c22b5642ae6f5dc567..a467c9551876de3b3b63f52b317d1181e1ca9825 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1517,6 +1517,13 @@ public abstract class PlayerList {
     }
 
     public void reloadResources() {
+        // Paper start - split this method up into separate methods
+        this.reloadAdvancementData();
+        this.reloadTagData();
+        this.reloadRecipeData();
+    }
+    public void reloadAdvancementData() {
+        // Paper end
         // CraftBukkit start
         /*Iterator iterator = this.advancements.values().iterator();
 
@@ -1532,7 +1539,15 @@ public abstract class PlayerList {
         }
         // CraftBukkit end
 
+        // Paper start
+    }
+    public void reloadTagData() {
+        // Paper end
         this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
+        // Paper start
+    }
+    public void reloadRecipeData() {
+        // Paper end
         ClientboundUpdateRecipesPacket packetplayoutrecipeupdate = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes());
         Iterator iterator1 = this.players.iterator();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6438891e243d0c25f1b3fbe0303ef1c133637cbb..0f0052aa556a40eef6525a21a68919cd5a42fe43 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1062,6 +1062,18 @@ public final class CraftServer implements Server {
         ReloadCommand.reload(console);
     }
 
+    // Paper start
+    @Override
+    public void updateResources() {
+        this.playerList.reloadResources();
+    }
+
+    @Override
+    public void updateRecipes() {
+        this.playerList.reloadRecipeData();
+    }
+    // Paper end
+
     private void loadIcon() {
         this.icon = new CraftIconCache(null);
         try {
@@ -1404,6 +1416,13 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean addRecipe(Recipe recipe) {
+        // Paper start
+        return this.addRecipe(recipe, false);
+    }
+
+    @Override
+    public boolean addRecipe(Recipe recipe, boolean resendRecipes) {
+        // Paper end
         CraftRecipe toAdd;
         if (recipe instanceof CraftRecipe) {
             toAdd = (CraftRecipe) recipe;
@@ -1433,6 +1452,11 @@ public final class CraftServer implements Server {
             }
         }
         toAdd.addToCraftingManager();
+        // Paper start
+        if (resendRecipes) {
+            this.playerList.reloadRecipeData();
+        }
+        // Paper end
         return true;
     }
 
@@ -1552,10 +1576,23 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean removeRecipe(NamespacedKey recipeKey) {
+        // Paper start
+        return this.removeRecipe(recipeKey, false);
+    }
+
+    @Override
+    public boolean removeRecipe(NamespacedKey recipeKey, boolean resendRecipes) {
+        // Paper end
         Preconditions.checkArgument(recipeKey != null, "recipeKey == null");
 
         ResourceLocation mcKey = CraftNamespacedKey.toMinecraft(recipeKey);
-        return this.getServer().getRecipeManager().removeRecipe(mcKey);
+        // Paper start - resend recipes on successful removal
+        boolean removed = this.getServer().getRecipeManager().removeRecipe(mcKey);
+        if (removed && resendRecipes) {
+            this.playerList.reloadRecipeData();
+        }
+        return removed;
+        // Paper end
     }
 
     @Override
