From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 6 May 2021 19:57:58 -0700
Subject: [PATCH] More Enchantment API

== AT ==
public net.minecraft.world.item.enchantment.Enchantment slots

Co-authored-by: Luis <luisc99@icloud.com>

diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index bb8a3e670924ebcce48669c5dce57e2df03fad77..58a24e149ae9500c9db90693ac9eb6446794535c 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -71,7 +71,7 @@ public class CraftEnchantment extends Enchantment implements Handleable<net.mine
 
     @Override
     public boolean isCursed() {
-        return this.handle instanceof BindingCurseEnchantment || this.handle instanceof VanishingCurseEnchantment;
+        return this.handle.isCurse(); // Paper - More Enchantment API
     }
 
     @Override
@@ -150,6 +150,77 @@ public class CraftEnchantment extends Enchantment implements Handleable<net.mine
     public String translationKey() {
         return this.handle.getDescriptionId();
     }
+
+    @Override
+    public boolean isTradeable() {
+        return handle.isTradeable();
+    }
+
+    @Override
+    public boolean isDiscoverable() {
+        return handle.isDiscoverable();
+    }
+
+    @Override
+    public int getMinModifiedCost(int level) {
+        return handle.getMinCost(level);
+    }
+
+    @Override
+    public int getMaxModifiedCost(int level) {
+        return handle.getMaxCost(level);
+    }
+
+    @Override
+    public io.papermc.paper.enchantments.EnchantmentRarity getRarity() {
+        return fromNMSRarity(handle.getRarity());
+    }
+
+    @Override
+    public float getDamageIncrease(int level, org.bukkit.entity.EntityCategory entityCategory) {
+        return handle.getDamageBonus(level, guessEntityTypeFromEnchantmentCategory(entityCategory));
+    }
+
+    @Override
+    public float getDamageIncrease(int level, org.bukkit.entity.EntityType entityType) {
+        return handle.getDamageBonus(level, org.bukkit.craftbukkit.util.CraftMagicNumbers.getEntityTypes(entityType));
+    }
+
+    @Deprecated(forRemoval = true)
+    private net.minecraft.world.entity.EntityType<?> guessEntityTypeFromEnchantmentCategory(
+        final org.bukkit.entity.EntityCategory entityCategory
+    ) {
+        final net.minecraft.tags.TagKey<net.minecraft.world.entity.EntityType<?>> tag = switch (entityCategory) {
+            case ARTHROPOD -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_BANE_OF_ARTHROPODS;
+            case UNDEAD -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_SMITE;
+            case WATER -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_IMPALING;
+            default -> null;
+        };
+        if (tag == null) return null;
+
+        return net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.getTag(tag)
+            .map(e -> e.size() > 0 ? e.get(0).value() : null)
+            .orElse(null);
+    }
+
+    @Override
+    public java.util.Set<org.bukkit.inventory.EquipmentSlot> getActiveSlots() {
+        return java.util.stream.Stream.of(handle.slots).map(org.bukkit.craftbukkit.CraftEquipmentSlot::getSlot).collect(java.util.stream.Collectors.toSet());
+    }
+
+    public static io.papermc.paper.enchantments.EnchantmentRarity fromNMSRarity(net.minecraft.world.item.enchantment.Enchantment.Rarity nmsRarity) {
+        if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.COMMON) {
+            return io.papermc.paper.enchantments.EnchantmentRarity.COMMON;
+        } else if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.UNCOMMON) {
+            return io.papermc.paper.enchantments.EnchantmentRarity.UNCOMMON;
+        } else if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.RARE) {
+            return io.papermc.paper.enchantments.EnchantmentRarity.RARE;
+        } else if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.VERY_RARE) {
+            return io.papermc.paper.enchantments.EnchantmentRarity.VERY_RARE;
+        }
+
+        throw new IllegalArgumentException(String.format("Unable to convert %s to a enum value of %s.", nmsRarity, io.papermc.paper.enchantments.EnchantmentRarity.class));
+    }
     // Paper end
 
     @Override
diff --git a/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java b/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..03a53ceb0dc3aaff7b5d10ec57f74d71be90ec3a
--- /dev/null
+++ b/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java
@@ -0,0 +1,18 @@
+package io.papermc.paper.enchantments;
+
+import net.minecraft.world.item.enchantment.Enchantment.Rarity;
+import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+public class EnchantmentRarityTest {
+
+    @Test
+    public void test() {
+        for (Rarity nmsRarity : Rarity.values()) {
+            // Will throw exception if a bukkit counterpart is not found
+            CraftEnchantment.fromNMSRarity(nmsRarity);
+        }
+    }
+}
diff --git a/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..4ee48ef89f0e31a7bda4b04453fca8177874f540
--- /dev/null
+++ b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
@@ -0,0 +1,34 @@
+package io.papermc.paper.entity;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+import net.minecraft.world.entity.MobType;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.entity.EntityCategory;
+import org.junit.jupiter.api.Test;
+
+import java.lang.reflect.Field;
+import java.util.Map;
+import java.util.Set;
+
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public class EntityCategoryTest {
+
+    @Test
+    public void test() throws IllegalAccessException {
+
+        Map<MobType, String> enumMonsterTypeFieldMap = Maps.newHashMap();
+        for (Field field : MobType.class.getDeclaredFields()) {
+            if (field.getType() == MobType.class) {
+                enumMonsterTypeFieldMap.put( (MobType) field.get(null), field.getName());
+            }
+        }
+
+        for (EntityCategory entityCategory : EntityCategory.values()) {
+            enumMonsterTypeFieldMap.remove(CraftLivingEntity.fromBukkitEntityCategory(entityCategory));
+        }
+        assertTrue(enumMonsterTypeFieldMap.size() == 0, MobType.class.getName() + " instance(s): " + Joiner.on(", ").join(enumMonsterTypeFieldMap.values()) + " do not have bukkit equivalents");
+    }
+}
