From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 6 May 2021 19:57:58 -0700
Subject: [PATCH] More Enchantment API

== AT ==
public net.minecraft.world.item.enchantment.Enchantment definition

Co-authored-by: Luis <luisc99@icloud.com>

diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index bb8a3e670924ebcce48669c5dce57e2df03fad77..bb45dde0fd91796d5fd83a5fd20f5f1d5ad63ee7 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -71,7 +71,7 @@ public class CraftEnchantment extends Enchantment implements Handleable<net.mine
 
     @Override
     public boolean isCursed() {
-        return this.handle instanceof BindingCurseEnchantment || this.handle instanceof VanishingCurseEnchantment;
+        return this.handle.isCurse(); // Paper - More Enchantment API
     }
 
     @Override
@@ -150,6 +150,63 @@ public class CraftEnchantment extends Enchantment implements Handleable<net.mine
     public String translationKey() {
         return this.handle.getDescriptionId();
     }
+
+    @Override
+    public boolean isTradeable() {
+        return handle.isTradeable();
+    }
+
+    @Override
+    public boolean isDiscoverable() {
+        return handle.isDiscoverable();
+    }
+
+    @Override
+    public int getMinModifiedCost(int level) {
+        return handle.getMinCost(level);
+    }
+
+    @Override
+    public int getMaxModifiedCost(int level) {
+        return handle.getMaxCost(level);
+    }
+
+    @Override
+    public io.papermc.paper.enchantments.EnchantmentRarity getRarity() {
+        throw new UnsupportedOperationException("Enchantments don't have a rarity anymore in 1.20.5+.");
+    }
+
+    @Override
+    public float getDamageIncrease(int level, org.bukkit.entity.EntityCategory entityCategory) {
+        return handle.getDamageBonus(level, guessEntityTypeFromEnchantmentCategory(entityCategory));
+    }
+
+    @Override
+    public float getDamageIncrease(int level, org.bukkit.entity.EntityType entityType) {
+        return handle.getDamageBonus(level, org.bukkit.craftbukkit.util.CraftMagicNumbers.getEntityTypes(entityType));
+    }
+
+    @Deprecated(forRemoval = true)
+    private net.minecraft.world.entity.EntityType<?> guessEntityTypeFromEnchantmentCategory(
+        final org.bukkit.entity.EntityCategory entityCategory
+    ) {
+        final net.minecraft.tags.TagKey<net.minecraft.world.entity.EntityType<?>> tag = switch (entityCategory) {
+            case ARTHROPOD -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_BANE_OF_ARTHROPODS;
+            case UNDEAD -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_SMITE;
+            case WATER -> net.minecraft.tags.EntityTypeTags.SENSITIVE_TO_IMPALING;
+            default -> null;
+        };
+        if (tag == null) return null;
+
+        return net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.getTag(tag)
+            .map(e -> e.size() > 0 ? e.get(0).value() : null)
+            .orElse(null);
+    }
+
+    @Override
+    public java.util.Set<org.bukkit.inventory.EquipmentSlot> getActiveSlots() {
+        return java.util.stream.Stream.of(handle.definition.slots()).map(org.bukkit.craftbukkit.CraftEquipmentSlot::getSlot).collect(java.util.stream.Collectors.toSet());
+    }
     // Paper end
 
     @Override
