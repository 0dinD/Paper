From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Thu, 8 Dec 2022 17:31:21 -0800
Subject: [PATCH] Mark experimental api as such


diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 716a40b055e693cfda38d2d8223ce4320919a332..ddcd5038e00fde469012171eef114df677cf2ecc 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -155,12 +155,15 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     BIRCH_PLANKS(29322),
     JUNGLE_PLANKS(26445),
     ACACIA_PLANKS(31312),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_PLANKS(8354),
     DARK_OAK_PLANKS(20869),
     MANGROVE_PLANKS(7078),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_PLANKS(8520),
     CRIMSON_PLANKS(18812),
     WARPED_PLANKS(16045),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_MOSAIC(10715),
     /**
      * BlockData: {@link Sapling}
@@ -185,6 +188,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Sapling}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_SAPLING(25204, Sapling.class),
     /**
      * BlockData: {@link Sapling}
@@ -199,6 +203,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link SuspiciousSand}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SUSPICIOUS_SAND(18410, SuspiciousSand.class),
     RED_SAND(16279),
     GRAVEL(7804),
@@ -340,6 +345,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_LOG(20847, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -368,6 +374,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_BLOCK(20770, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -392,6 +399,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     STRIPPED_CHERRY_LOG(18061, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -432,6 +440,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     STRIPPED_CHERRY_WOOD(19647, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -452,6 +461,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     STRIPPED_BAMBOO_BLOCK(14799, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -476,6 +486,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Orientable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_WOOD(9826, Orientable.class),
     /**
      * BlockData: {@link Orientable}
@@ -516,6 +527,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Leaves}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_LEAVES(20856, Leaves.class),
     /**
      * BlockData: {@link Leaves}
@@ -581,6 +593,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     CORNFLOWER(15405),
     LILY_OF_THE_VALLEY(7185),
     WITHER_ROSE(8619),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     TORCHFLOWER(4501),
     SPORE_BLOSSOM(20627),
     BROWN_MUSHROOM(9665),
@@ -610,6 +623,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link PinkPetals}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     PINK_PETALS(10420, PinkPetals.class),
     MOSS_BLOCK(9175),
     /**
@@ -651,6 +665,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Slab}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_SLAB(16673, Slab.class),
     /**
      * BlockData: {@link Slab}
@@ -663,10 +678,12 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Slab}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_SLAB(17798, Slab.class),
     /**
      * BlockData: {@link Slab}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_MOSAIC_SLAB(22118, Slab.class),
     /**
      * BlockData: {@link Slab}
@@ -753,10 +770,12 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link ChiseledBookshelf}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHISELED_BOOKSHELF(8099, ChiseledBookshelf.class),
     /**
      * BlockData: {@link DecoratedPot}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     DECORATED_POT(8720, 1, DecoratedPot.class),
     MOSSY_COBBLESTONE(21900),
     OBSIDIAN(32723),
@@ -842,6 +861,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Fence}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_FENCE(32047, Fence.class),
     /**
      * BlockData: {@link Fence}
@@ -854,6 +874,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Fence}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_FENCE(17207, Fence.class),
     /**
      * BlockData: {@link Fence}
@@ -1022,6 +1043,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Stairs}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_STAIRS(18380, Stairs.class),
     /**
      * BlockData: {@link Stairs}
@@ -1034,10 +1056,12 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Stairs}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_STAIRS(25674, Stairs.class),
     /**
      * BlockData: {@link Stairs}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_MOSAIC_STAIRS(20977, Stairs.class),
     /**
      * BlockData: {@link Stairs}
@@ -1873,6 +1897,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Switch}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_BUTTON(9058, Switch.class),
     /**
      * BlockData: {@link Switch}
@@ -1885,6 +1910,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Switch}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_BUTTON(21810, Switch.class),
     /**
      * BlockData: {@link Switch}
@@ -1933,6 +1959,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Powerable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_PRESSURE_PLATE(8651, Powerable.class),
     /**
      * BlockData: {@link Powerable}
@@ -1945,6 +1972,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Powerable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_PRESSURE_PLATE(26740, Powerable.class),
     /**
      * BlockData: {@link Powerable}
@@ -1981,6 +2009,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Door}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_DOOR(12684, Door.class),
     /**
      * BlockData: {@link Door}
@@ -1993,6 +2022,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Door}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_DOOR(19971, Door.class),
     /**
      * BlockData: {@link Door}
@@ -2029,6 +2059,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link TrapDoor}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_TRAPDOOR(6293, TrapDoor.class),
     /**
      * BlockData: {@link TrapDoor}
@@ -2041,6 +2072,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link TrapDoor}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_TRAPDOOR(9174, TrapDoor.class),
     /**
      * BlockData: {@link TrapDoor}
@@ -2073,6 +2105,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Gate}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_FENCE_GATE(28222, Gate.class),
     /**
      * BlockData: {@link Gate}
@@ -2085,6 +2118,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Gate}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_FENCE_GATE(14290, Gate.class),
     /**
      * BlockData: {@link Gate}
@@ -2129,13 +2163,17 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     JUNGLE_CHEST_BOAT(20133, 1),
     ACACIA_BOAT(27326, 1),
     ACACIA_CHEST_BOAT(28455, 1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_BOAT(13628, 1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_CHEST_BOAT(7165, 1),
     DARK_OAK_BOAT(28618, 1),
     DARK_OAK_CHEST_BOAT(8733, 1),
     MANGROVE_BOAT(20792, 1),
     MANGROVE_CHEST_BOAT(18572, 1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_RAFT(25901, 1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_CHEST_RAFT(20056, 1),
     /**
      * BlockData: {@link StructureBlock}
@@ -2261,6 +2299,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Sign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_SIGN(16520, 16, Sign.class),
     /**
      * BlockData: {@link Sign}
@@ -2273,6 +2312,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Sign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_SIGN(26139, 16, Sign.class),
     /**
      * BlockData: {@link Sign}
@@ -2285,46 +2325,57 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     OAK_HANGING_SIGN(20116, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SPRUCE_HANGING_SIGN(24371, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BIRCH_HANGING_SIGN(17938, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     JUNGLE_HANGING_SIGN(27671, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     ACACIA_HANGING_SIGN(30257, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_HANGING_SIGN(5088, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     DARK_OAK_HANGING_SIGN(23360, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     MANGROVE_HANGING_SIGN(25106, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_HANGING_SIGN(4726, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CRIMSON_HANGING_SIGN(20696, 16, HangingSign.class),
     /**
      * BlockData: {@link HangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     WARPED_HANGING_SIGN(8195, 16, HangingSign.class),
     BUCKET(15215, 16),
     WATER_BUCKET(8802, 1),
@@ -2348,6 +2399,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     EGG(21603, 16),
     COMPASS(24139),
     RECOVERY_COMPASS(12710),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BUNDLE(16835, 1),
     FISHING_ROD(4167, 1, 64),
     CLOCK(14980),
@@ -2488,6 +2540,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     BEE_SPAWN_EGG(22924),
     BLAZE_SPAWN_EGG(4759),
     CAT_SPAWN_EGG(29583),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CAMEL_SPAWN_EGG(14760),
     CAVE_SPIDER_SPAWN_EGG(23341),
     CHICKEN_SPAWN_EGG(5462),
@@ -2535,6 +2588,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     SKELETON_SPAWN_EGG(15261),
     SKELETON_HORSE_SPAWN_EGG(21356),
     SLIME_SPAWN_EGG(17196),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SNIFFER_SPAWN_EGG(27473),
     SNOW_GOLEM_SPAWN_EGG(24732),
     SPIDER_SPAWN_EGG(14984),
@@ -2599,6 +2653,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Rotatable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     PIGLIN_HEAD(5512, Rotatable.class),
     NETHER_STAR(12469),
     PUMPKIN_PIE(28725),
@@ -2690,6 +2745,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     END_CRYSTAL(19090),
     CHORUS_FRUIT(7652),
     POPPED_CHORUS_FRUIT(27844),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     TORCHFLOWER_SEEDS(18153),
     BEETROOT(23305),
     BEETROOT_SEEDS(21282),
@@ -2726,6 +2782,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     NAUTILUS_SHELL(19989),
     HEART_OF_THE_SEA(11807),
     CROSSBOW(4340, 1, 465),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SUSPICIOUS_STEW(8173, 1),
     /**
      * BlockData: {@link Directional}
@@ -2937,22 +2994,39 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     PEARLESCENT_FROGLIGHT(21441, Orientable.class),
     FROGSPAWN(8350),
     ECHO_SHARD(12529),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BRUSH(30569, 1, 64),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     NETHERITE_UPGRADE_SMITHING_TEMPLATE(7615),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE(16124),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     DUNE_ARMOR_TRIM_SMITHING_TEMPLATE(30925),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     COAST_ARMOR_TRIM_SMITHING_TEMPLATE(25501),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     WILD_ARMOR_TRIM_SMITHING_TEMPLATE(5870),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     WARD_ARMOR_TRIM_SMITHING_TEMPLATE(24534),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     EYE_ARMOR_TRIM_SMITHING_TEMPLATE(14663),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     VEX_ARMOR_TRIM_SMITHING_TEMPLATE(25818),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     TIDE_ARMOR_TRIM_SMITHING_TEMPLATE(20420),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE(14386),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     RIB_ARMOR_TRIM_SMITHING_TEMPLATE(6010),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE(29143),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTERY_SHARD_ARCHER(26154),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTERY_SHARD_PRIZE(31677),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTERY_SHARD_ARMS_UP(29222),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTERY_SHARD_SKULL(14619),
     /**
      * BlockData: {@link Levelled}
@@ -3006,6 +3080,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link WallSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_WALL_SIGN(20188, 16, WallSign.class),
     /**
      * BlockData: {@link WallSign}
@@ -3022,50 +3097,62 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link WallSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_WALL_SIGN(18857, 16, WallSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     OAK_WALL_HANGING_SIGN(15637, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SPRUCE_WALL_HANGING_SIGN(18833, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BIRCH_WALL_HANGING_SIGN(15937, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     ACACIA_WALL_HANGING_SIGN(22477, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHERRY_WALL_HANGING_SIGN(10953, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     JUNGLE_WALL_HANGING_SIGN(16691, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     DARK_OAK_WALL_HANGING_SIGN(14296, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     MANGROVE_WALL_HANGING_SIGN(16974, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CRIMSON_WALL_HANGING_SIGN(28982, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     WARPED_WALL_HANGING_SIGN(20605, WallHangingSign.class),
     /**
      * BlockData: {@link WallHangingSign}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     BAMBOO_WALL_HANGING_SIGN(6669, WallHangingSign.class),
     /**
      * BlockData: {@link RedstoneWallTorch}
@@ -3113,12 +3200,14 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
      * BlockData: {@link Tripwire}
      */
     TRIPWIRE(8810, Tripwire.class),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTED_TORCHFLOWER(21278),
     POTTED_OAK_SAPLING(11905),
     POTTED_SPRUCE_SAPLING(29498),
     POTTED_BIRCH_SAPLING(32484),
     POTTED_JUNGLE_SAPLING(7525),
     POTTED_ACACIA_SAPLING(14096),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     POTTED_CHERRY_SAPLING(30785),
     POTTED_DARK_OAK_SAPLING(6486),
     POTTED_MANGROVE_PROPAGULE(22003),
@@ -3175,6 +3264,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Directional}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     PIGLIN_WALL_HEAD(4446, Directional.class),
     /**
      * BlockData: {@link Directional}
@@ -3243,6 +3333,7 @@ public enum Material implements Keyed, Translatable, net.kyori.adventure.transla
     /**
      * BlockData: {@link Ageable}
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     TORCHFLOWER_CROP(28460, Ageable.class),
     /**
      * BlockData: {@link Ageable}
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 8f9a18ae5cdc51a2cc4ac0e45781fdce91172b6c..bfcf1f54596dbea22336a4eb441d64399358c580 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -146,6 +146,7 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all bamboo blocks.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> BAMBOO_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bamboo_blocks"), Material.class);
     /**
      * Vanilla block tag representing all banner blocks.
@@ -320,14 +321,17 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all ceiling signs.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> CEILING_HANGING_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("ceiling_hanging_signs"), Material.class);
     /**
      * Vanilla block tag representing all wall hanging signs.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> WALL_HANGING_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_hanging_signs"), Material.class);
     /**
      * Vanilla block tag representing all hanging signs.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> ALL_HANGING_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("all_hanging_signs"), Material.class);
     /**
      * Vanilla block tag representing all signs, regardless of type.
@@ -757,6 +761,7 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all books that may be placed on bookshelves.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> ITEMS_BOOKSHELF_BOOKS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("bookshelf_books"), Material.class);
     /**
      * Vanilla item tag representing all items that may be placed in beacons.
@@ -777,6 +782,7 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all hanging signs.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     Tag<Material> ITEMS_HANGING_SIGNS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("hanging_signs"), Material.class);
     /**
      * Vanilla item tag representing all items which will ignite creepers when
diff --git a/src/main/java/org/bukkit/block/ChiseledBookshelf.java b/src/main/java/org/bukkit/block/ChiseledBookshelf.java
index 4cae298f18b35f73e3a64d5c8926bdc0f0402c4b..93ddac92266edf3b08096ca6c9bc182991924aa8 100644
--- a/src/main/java/org/bukkit/block/ChiseledBookshelf.java
+++ b/src/main/java/org/bukkit/block/ChiseledBookshelf.java
@@ -7,6 +7,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Represents a captured state of a chiseled bookshelf.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface ChiseledBookshelf extends TileState, BlockInventoryHolder {
 
     /**
diff --git a/src/main/java/org/bukkit/block/DecoratedPot.java b/src/main/java/org/bukkit/block/DecoratedPot.java
index c943d2e5c99244067a806954b962738463ee8cfb..62c3afde3e778f8576e5bf07f5cd5960183e2a3e 100644
--- a/src/main/java/org/bukkit/block/DecoratedPot.java
+++ b/src/main/java/org/bukkit/block/DecoratedPot.java
@@ -8,6 +8,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a captured state of a decorated pot.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface DecoratedPot extends TileState {
 
     /**
diff --git a/src/main/java/org/bukkit/block/HangingSign.java b/src/main/java/org/bukkit/block/HangingSign.java
index 9bef6c6597222833f6c36bbfc382849fecad4439..d404ee784f3b99276080ec77d91ba5da724ce563 100644
--- a/src/main/java/org/bukkit/block/HangingSign.java
+++ b/src/main/java/org/bukkit/block/HangingSign.java
@@ -3,5 +3,6 @@ package org.bukkit.block;
 /**
  * Represents a captured state of a hanging sign.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface HangingSign extends Sign {
 }
diff --git a/src/main/java/org/bukkit/block/Skull.java b/src/main/java/org/bukkit/block/Skull.java
index c7502a3913cf14e66559c21489d6f2205f3eb06a..e4b8b03ceed86548e46774096e84b0c0a39b61a4 100644
--- a/src/main/java/org/bukkit/block/Skull.java
+++ b/src/main/java/org/bukkit/block/Skull.java
@@ -110,6 +110,7 @@ public interface Skull extends TileState {
      *
      * @return the key of the sound, or null
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     @Nullable
     public NamespacedKey getNoteBlockSound();
 
@@ -121,6 +122,7 @@ public interface Skull extends TileState {
      *
      * @param noteBlockSound the key of the sound to be played, or null
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     public void setNoteBlockSound(@Nullable NamespacedKey noteBlockSound);
 
     /**
diff --git a/src/main/java/org/bukkit/block/SuspiciousSand.java b/src/main/java/org/bukkit/block/SuspiciousSand.java
index 2f64b66d1066c368adac16f6f79c5280da61176f..578f6be626fbd034268e4ce148963d70ccc49e0a 100644
--- a/src/main/java/org/bukkit/block/SuspiciousSand.java
+++ b/src/main/java/org/bukkit/block/SuspiciousSand.java
@@ -7,6 +7,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Represents a captured state of suspicious sand.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface SuspiciousSand extends Lootable, TileState {
 
     /**
diff --git a/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java b/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java
index a172e22ce47c74554a582e8fce2796238bfb5d65..c21e8afdbe944b74049d959e27d4d389a6980d15 100644
--- a/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java
+++ b/src/main/java/org/bukkit/block/data/type/ChiseledBookshelf.java
@@ -11,6 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * <br>
  * Block may have 0, 1... {@link #getMaximumOccupiedSlots()}-1 occupied slots.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface ChiseledBookshelf extends Directional {
 
     /**
diff --git a/src/main/java/org/bukkit/block/data/type/DecoratedPot.java b/src/main/java/org/bukkit/block/data/type/DecoratedPot.java
index eb0ffa977450ef0c79caa78302cfe75ee35b34b7..94e48f0ab48a8aba76d60fbe8507ca37a47c4ecb 100644
--- a/src/main/java/org/bukkit/block/data/type/DecoratedPot.java
+++ b/src/main/java/org/bukkit/block/data/type/DecoratedPot.java
@@ -3,5 +3,6 @@ package org.bukkit.block.data.type;
 import org.bukkit.block.data.Directional;
 import org.bukkit.block.data.Waterlogged;
 
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface DecoratedPot extends Directional, Waterlogged {
 }
diff --git a/src/main/java/org/bukkit/block/data/type/HangingSign.java b/src/main/java/org/bukkit/block/data/type/HangingSign.java
index c5a0c1476317ce2688ead25c53f3adabf875eefd..42d05598b27e59fba09b0bd2a7208215e7f771ed 100644
--- a/src/main/java/org/bukkit/block/data/type/HangingSign.java
+++ b/src/main/java/org/bukkit/block/data/type/HangingSign.java
@@ -4,5 +4,6 @@ import org.bukkit.block.data.Attachable;
 import org.bukkit.block.data.Rotatable;
 import org.bukkit.block.data.Waterlogged;
 
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface HangingSign extends Attachable, Rotatable, Waterlogged {
 }
diff --git a/src/main/java/org/bukkit/block/data/type/PinkPetals.java b/src/main/java/org/bukkit/block/data/type/PinkPetals.java
index a84b36f7587eb2ed9e9177973b3166dc94cdf3df..a00acfef77db628e73ae08ffe3ac227e8d4c7b3e 100644
--- a/src/main/java/org/bukkit/block/data/type/PinkPetals.java
+++ b/src/main/java/org/bukkit/block/data/type/PinkPetals.java
@@ -5,6 +5,7 @@ import org.bukkit.block.data.Directional;
 /**
  * 'flower_amount' represents the number of petals.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface PinkPetals extends Directional {
 
     /**
diff --git a/src/main/java/org/bukkit/block/data/type/SuspiciousSand.java b/src/main/java/org/bukkit/block/data/type/SuspiciousSand.java
index bb10fda9449ec0ea8a17158c33b345fdf882175d..ea00f7b4df94c77a1277ce790bd3824ed3a730fa 100644
--- a/src/main/java/org/bukkit/block/data/type/SuspiciousSand.java
+++ b/src/main/java/org/bukkit/block/data/type/SuspiciousSand.java
@@ -5,6 +5,7 @@ import org.bukkit.block.data.BlockData;
 /**
  * 'dusted' represents how far uncovered by brush the block is.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface SuspiciousSand extends BlockData {
 
     /**
diff --git a/src/main/java/org/bukkit/block/data/type/WallHangingSign.java b/src/main/java/org/bukkit/block/data/type/WallHangingSign.java
index 283b21024d7a6eeebbf7306f95fce7eb4714bac6..7c9273b07b39b656796983cb43cd7f0987ee0fd8 100644
--- a/src/main/java/org/bukkit/block/data/type/WallHangingSign.java
+++ b/src/main/java/org/bukkit/block/data/type/WallHangingSign.java
@@ -3,5 +3,6 @@ package org.bukkit.block.data.type;
 import org.bukkit.block.data.Directional;
 import org.bukkit.block.data.Waterlogged;
 
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface WallHangingSign extends Directional, Waterlogged {
 }
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index f7548098bcdd033d9c530fdc584fc5538c635ca1..a8cbb91bba3086d768f7f10f0e403da690919f09 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -141,9 +141,11 @@ public interface Boat extends Vehicle {
         BIRCH(Material.BIRCH_PLANKS),
         JUNGLE(Material.JUNGLE_PLANKS),
         ACACIA(Material.ACACIA_PLANKS),
+        @org.jetbrains.annotations.ApiStatus.Experimental // Paper
         CHERRY(Material.CHERRY_PLANKS),
         DARK_OAK(Material.DARK_OAK_PLANKS),
         MANGROVE(Material.MANGROVE_PLANKS),
+        @org.jetbrains.annotations.ApiStatus.Experimental // Paper
         BAMBOO(Material.BAMBOO_PLANKS),
         ;
 
diff --git a/src/main/java/org/bukkit/entity/Camel.java b/src/main/java/org/bukkit/entity/Camel.java
index 17e4e0a822d4372e0a98612294ec0bd728830164..f827d8f508441a035974974d34450879835de91e 100644
--- a/src/main/java/org/bukkit/entity/Camel.java
+++ b/src/main/java/org/bukkit/entity/Camel.java
@@ -3,6 +3,7 @@ package org.bukkit.entity;
 /**
  * Represents a Camel.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface Camel extends AbstractHorse, Sittable {
 
     /**
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 9f935266f51f4ea5d1193031f52e5327350cc06f..03d47171833b3617b8605acc3fd45fef80dea5db 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -278,10 +278,12 @@ public enum EntityType implements Keyed, Translatable, net.kyori.adventure.trans
     FROG("frog", Frog.class, -1),
     TADPOLE("tadpole", Tadpole.class, -1),
     WARDEN("warden", Warden.class, -1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CAMEL("camel", Camel.class, -1),
     BLOCK_DISPLAY("block_display", BlockDisplay.class, -1),
     INTERACTION("interaction", Interaction.class, -1),
     ITEM_DISPLAY("item_display", ItemDisplay.class, -1),
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SNIFFER("sniffer", Sniffer.class, -1),
     TEXT_DISPLAY("text_display", TextDisplay.class, -1),
     /**
diff --git a/src/main/java/org/bukkit/entity/Sniffer.java b/src/main/java/org/bukkit/entity/Sniffer.java
index dc640c44660acef8f2d17283426052fe7e9e8ae2..c00855481422a1df5cc5591f492bdb0be0cfdb93 100644
--- a/src/main/java/org/bukkit/entity/Sniffer.java
+++ b/src/main/java/org/bukkit/entity/Sniffer.java
@@ -3,6 +3,7 @@ package org.bukkit.entity;
 /**
  * Represents a Sniffer.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface Sniffer extends Animals {
 
 }
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
index 8f601e85df580ef8106eaff8b9eafb5691a4874b..81afeae6add8a5be05e392218abc7d98da3135d7 100644
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
@@ -69,6 +69,7 @@ public final class MemoryKey<T> implements Keyed {
     public static final MemoryKey<Location> LIKED_NOTEBLOCK_POSITION = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock"), Location.class);
     public static final MemoryKey<Integer> LIKED_NOTEBLOCK_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("liked_noteblock_cooldown_ticks"), Integer.class);
     public static final MemoryKey<Integer> ITEM_PICKUP_COOLDOWN_TICKS = new MemoryKey<>(NamespacedKey.minecraft("item_pickup_cooldown_ticks"), Integer.class);
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     public static final MemoryKey<Location> SNIFFER_EXPLORED_POSITIONS = new MemoryKey<>(NamespacedKey.minecraft("sniffer_explored_positions"), Location.class);
 
     /**
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index 456eb20f8d603b1ebbaa11b8832e56c08406b7c9..8c2fc8ef3af94dd049c3349029792796bc3f65e5 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -137,13 +137,14 @@ public enum InventoryType {
     /**
      * Pseudo chiseled bookshelf inventory, with 6 slots of undefined type.
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     CHISELED_BOOKSHELF(6, "Chiseled Bookshelf"),
     /**
      * The new smithing inventory, with 3 CRAFTING slots and 1 RESULT slot.
      *
      * @deprecated draft, experimental 1.20 API
      */
-    @Deprecated
+    @Deprecated @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     SMITHING_NEW(4, "Upgrade Gear"),
     ;
 
diff --git a/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java b/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java
index b99f26079c14931d443615fa81eac9791080ecb0..47a8f451e8112bf533778f25166dcf1966057c70 100644
--- a/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java
+++ b/src/main/java/org/bukkit/inventory/ChiseledBookshelfInventory.java
@@ -6,6 +6,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * Interface to the inventory of a chiseled bookshelf.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface ChiseledBookshelfInventory extends Inventory {
 
     @Nullable
diff --git a/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java b/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
index 08fd3eca8383cdc2d06c3ce973e8c402d279077e..38fbeeba2f5737e4e593d193e7816e3986f0d262 100644
--- a/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingTransformRecipe.java
@@ -6,6 +6,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Represents a smithing transform recipe.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public class SmithingTransformRecipe extends SmithingRecipe {
 
     private final RecipeChoice template;
diff --git a/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java b/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java
index 32cbdc342615e76ff7a896e67cb0736b0bdf1978..33031c8476b61b9df174380caca8f0027638f50c 100644
--- a/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingTrimRecipe.java
@@ -7,6 +7,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Represents a smithing trim recipe.
  */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public class SmithingTrimRecipe extends SmithingRecipe implements ComplexRecipe {
 
     private final RecipeChoice template;
diff --git a/src/main/java/org/bukkit/inventory/meta/BundleMeta.java b/src/main/java/org/bukkit/inventory/meta/BundleMeta.java
index bc992fdf6d5517995547d136e8cdbe4bd3496abe..751a13c4c00c7167ed3c64c0cd91ac66dc2f0dc3 100644
--- a/src/main/java/org/bukkit/inventory/meta/BundleMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BundleMeta.java
@@ -5,6 +5,7 @@ import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
 public interface BundleMeta extends ItemMeta {
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
index 862640b4611458dfbcd3be797eacd120fc8d1f9f..263fd5d4f8288108c4e2d16ca57a29a7e1c1e376 100644
--- a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
@@ -104,6 +104,7 @@ public interface SkullMeta extends ItemMeta {
      *
      * @param noteBlockSound the key of the sound to be played, or null
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     void setNoteBlockSound(@Nullable NamespacedKey noteBlockSound);
 
     /**
@@ -114,6 +115,7 @@ public interface SkullMeta extends ItemMeta {
      *
      * @return the key of the sound, or null
      */
+    @org.jetbrains.annotations.ApiStatus.Experimental // Paper
     @Nullable
     NamespacedKey getNoteBlockSound();
 
