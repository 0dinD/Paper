From 5afd50a682f8b729ddcd9d878c9131fee6b19d4a Mon Sep 17 00:00:00 2001
From: Iceee <andrew@opticgaming.tv>
Date: Thu, 12 Jun 2014 03:18:13 -0500
Subject: [PATCH] Fix movement inconsistencies


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 258bc9d..0ef4c28 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -525,41 +525,85 @@ public abstract class Entity {
 
             List list = this.world.getCubes(this, this.boundingBox.a(d0, d1, d2));
 
-            for (int i = 0; i < list.size(); ++i) {
-                d1 = ((AxisAlignedBB) list.get(i)).b(this.boundingBox, d1);
-            }
+            // PaperSpigot start - Fix movement inconsistencies
+            boolean flag1;
 
-            this.boundingBox.d(0.0D, d1, 0.0D);
-            if (!this.J && d7 != d1) {
-                d2 = 0.0D;
-                d1 = 0.0D;
-                d0 = 0.0D;
-            }
+            if(this.motZ > this.motX) {
 
-            boolean flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
+                for (int i = 0; i < list.size(); ++i) {
+                    d1 = ((AxisAlignedBB) list.get(i)).b(this.boundingBox, d1);
+                }
 
-            int j;
+                this.boundingBox.d(0.0D, d1, 0.0D);
+                if (!this.J && d7 != d1) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
 
-            for (j = 0; j < list.size(); ++j) {
-                d0 = ((AxisAlignedBB) list.get(j)).a(this.boundingBox, d0);
-            }
+                flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
 
-            this.boundingBox.d(d0, 0.0D, 0.0D);
-            if (!this.J && d6 != d0) {
-                d2 = 0.0D;
-                d1 = 0.0D;
-                d0 = 0.0D;
-            }
+                int j;
 
-            for (j = 0; j < list.size(); ++j) {
-                d2 = ((AxisAlignedBB) list.get(j)).c(this.boundingBox, d2);
-            }
+                for (j = 0; j < list.size(); ++j) {
+                    d0 = ((AxisAlignedBB) list.get(j)).a(this.boundingBox, d0);
+                }
+
+                this.boundingBox.d(d0, 0.0D, 0.0D);
+                if (!this.J && d6 != d0) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
+
+                for (j = 0; j < list.size(); ++j) {
+                    d2 = ((AxisAlignedBB) list.get(j)).c(this.boundingBox, d2);
+                }
+
+                this.boundingBox.d(0.0D, 0.0D, d2);
+                if (!this.J && d8 != d2) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
+            } else {
+                for (int i = 0; i < list.size(); ++i) {
+                    d1 = ((AxisAlignedBB) list.get(i)).b(this.boundingBox, d1);
+                }
 
-            this.boundingBox.d(0.0D, 0.0D, d2);
-            if (!this.J && d8 != d2) {
-                d2 = 0.0D;
-                d1 = 0.0D;
-                d0 = 0.0D;
+                this.boundingBox.d(0.0D, d1, 0.0D);
+                if (!this.J && d7 != d1) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
+
+                flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
+
+                int j;
+
+                for (j = 0; j < list.size(); ++j) {
+                    d2 = ((AxisAlignedBB) list.get(j)).c(this.boundingBox, d2);
+                }
+
+                this.boundingBox.d(0.0D, 0.0D, d2);
+                if (!this.J && d8 != d2) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
+
+                for (j = 0; j < list.size(); ++j) {
+                    d0 = ((AxisAlignedBB) list.get(j)).a(this.boundingBox, d0);
+                }
+
+                this.boundingBox.d(d0, 0.0D, 0.0D);
+                if (!this.J && d6 != d0) {
+                    d2 = 0.0D;
+                    d1 = 0.0D;
+                    d0 = 0.0D;
+                }
+                // PaperSpigot end
             }
 
             double d10;
-- 
1.9.1

